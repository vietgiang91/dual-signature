/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doantotnghiep;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.management.openmbean.InvalidKeyException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

/**
 *
 * @author vietg_000
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private static String orderNo = "";
    private static int itemPrice = 0;
    private static String itemNo = "";
    private static int quanlity = 0;
    private static int netAmount = 0;
    private static String strResultOI = "";
    private static String strResultPI = "";
    private static StringBuilder result = new StringBuilder();
    private static String strExpiryDate = "";
    private static String DualSignature = "";
    private static String DES_Plaintext = "";
    private static String DES_CipherText = "";
    private static String DES_secretKey = "";
    private static String Digital_Envelope = "";
    private static String Request_Message = "";
    private static StringBuilder result_Merchant = new StringBuilder();
    private SHA1 sha = new SHA1();
    private DES des = new DES();
    private static StringBuilder result_Bank = new StringBuilder();

    public MainFrame() {

        initComponents();
        taResult.setEditable(false);
        Calendar c = Calendar.getInstance();
        synchronized (c) {
            c.setTimeInMillis(System.currentTimeMillis());
        }
//        orderNo = "" + today.getHours() + today.getMinutes() + today.getDate() + today.getMonth() + today.getYear();
        orderNo = "NVG" + c.get(Calendar.DATE) + c.get(Calendar.MONTH) + c.get(Calendar.YEAR);
        lbOrderNo.setText(orderNo);
        netAmount = itemPrice * quanlity;
        DefaultComboBoxModel modelM = new DefaultComboBoxModel();

        for (int i = 1; i <= 12; i++) {
            modelM.addElement(i);
        }
        cbbMonth.setModel(modelM);
        DefaultComboBoxModel modelY = new DefaultComboBoxModel();
        for (int i = c.get(Calendar.YEAR) - 50; i <= c.get(Calendar.YEAR); i++) {
            modelY.addElement(i);
        }
        cbbYear.setModel(modelY);
        System.out.println(cbbYear.getSelectedItem());
        try {
            
                KeyGenerator keyGen = new KeyGenerator("RSA");
           
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lbSoHoaDon = new javax.swing.JLabel();
        cbbTenSP = new javax.swing.JComboBox();
        lbMaSP = new javax.swing.JLabel();
        lbTongTien = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfSoLuong = new javax.swing.JTextField();
        lbDonGia = new javax.swing.JLabel();
        lbOrderNo = new javax.swing.JLabel();
        lbItemNo = new javax.swing.JLabel();
        lbNetAmount = new javax.swing.JLabel();
        lbIemPrice = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lbGia = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfCardNumber = new javax.swing.JTextField();
        cbbMonth = new javax.swing.JComboBox();
        cbbYear = new javax.swing.JComboBox();
        tfNameOnCard = new javax.swing.JTextField();
        btnProceed = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        taMerchant_Result = new javax.swing.JTextArea();
        tfFilePath = new javax.swing.JTextField();
        btnOpen = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        tfBank_FilePath = new javax.swing.JTextField();
        btnBank_Open = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        taBank_Result = new javax.swing.JTextArea();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane4.setPreferredSize(new java.awt.Dimension(1366, 768));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Order Information"));

        jLabel1.setText("Order No.");

        jLabel2.setText("Item Name");

        jLabel3.setText("Item No.");

        jLabel4.setText("Quanlity");

        cbbTenSP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chọn sản phẩm", "Iphone 6+", "Macbook Air Pro", "Kẹo mút", "Nhà mặt phố", "Range Rover" }));
        cbbTenSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbTenSPActionPerformed(evt);
            }
        });

        jLabel6.setText("Item Price");

        tfSoLuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSoLuongActionPerformed(evt);
            }
        });

        jLabel10.setText("($)");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSoHoaDon)
                    .addComponent(lbMaSP)
                    .addComponent(lbTongTien))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbOrderNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbItemNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbNetAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1218, 1218, 1218))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(tfSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(cbbTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbGia)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addGap(143, 143, 143)
                        .addComponent(lbDonGia)
                        .addGap(18, 18, 18)
                        .addComponent(lbIemPrice)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbSoHoaDon)
                    .addComponent(lbOrderNo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbbTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(lbDonGia)
                    .addComponent(lbIemPrice)
                    .addComponent(jLabel15)
                    .addComponent(lbGia)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbMaSP)
                    .addComponent(lbItemNo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTongTien)
                    .addComponent(lbNetAmount))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Payment Information"));

        jLabel7.setText("Card Number");

        jLabel8.setText("Expiry Date");

        jLabel9.setText("Name on Card");

        cbbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbbYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tfNameOnCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNameOnCardActionPerformed(evt);
            }
        });

        btnProceed.setText("Proceed");
        btnProceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedActionPerformed(evt);
            }
        });

        jLabel5.setText("Month");

        jLabel11.setText("Year");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5Layout.setHorizontalGroup(
        	jPanel5Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel5Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel5Layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(jPanel5Layout.createSequentialGroup()
        					.addGap(0, 289, Short.MAX_VALUE)
        					.addComponent(btnProceed))
        				.addGroup(jPanel5Layout.createSequentialGroup()
        					.addGroup(jPanel5Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jLabel7, GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
        						.addComponent(jLabel8, GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
        						.addComponent(jLabel9, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(jPanel5Layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(jPanel5Layout.createSequentialGroup()
        							.addComponent(jLabel5)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(cbbMonth, 0, 82, Short.MAX_VALUE)
        							.addGap(33)
        							.addComponent(jLabel11, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(cbbYear, GroupLayout.PREFERRED_SIZE, 82, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED))
        						.addComponent(tfNameOnCard)
        						.addGroup(jPanel5Layout.createSequentialGroup()
        							.addComponent(tfCardNumber, GroupLayout.PREFERRED_SIZE, 281, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)))))
        			.addGap(87))
        );
        jPanel5Layout.setVerticalGroup(
        	jPanel5Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel5Layout.createSequentialGroup()
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        			.addGroup(jPanel5Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel7)
        				.addComponent(tfCardNumber, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(jPanel5Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel8)
        				.addComponent(cbbMonth, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel5)
        				.addComponent(cbbYear, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel11))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(jPanel5Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel9)
        				.addComponent(tfNameOnCard, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addComponent(btnProceed))
        );
        jPanel5.setLayout(jPanel5Layout);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6Layout.setHorizontalGroup(
        	jPanel6Layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jScrollPane2, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
        	jPanel6Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel6Layout.createSequentialGroup()
        			.addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
        			.addContainerGap())
        );
        taResult = new javax.swing.JTextArea();
        jScrollPane2.setViewportView(taResult);
        
                taResult.setColumns(20);
                taResult.setRows(5);
        jPanel6.setLayout(jPanel6Layout);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, 403, Short.MAX_VALUE)
        				.addComponent(jPanel4, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 397, Short.MAX_VALUE))
        			.addGap(18)
        			.addComponent(jPanel6, GroupLayout.PREFERRED_SIZE, 559, GroupLayout.PREFERRED_SIZE)
        			.addGap(12))
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(jPanel6, Alignment.LEADING, 0, 0, Short.MAX_VALUE)
        				.addGroup(Alignment.LEADING, jPanel1Layout.createSequentialGroup()
        					.addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap(103, Short.MAX_VALUE))
        );
        jPanel1.setLayout(jPanel1Layout);

        jTabbedPane4.addTab("CardHolder", jPanel1);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));

        taMerchant_Result.setColumns(20);
        taMerchant_Result.setRows(5);
        jScrollPane4.setViewportView(taMerchant_Result);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
        );

        btnOpen.setText("Open..");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(tfFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOpen)
                        .addGap(0, 601, Short.MAX_VALUE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpen))
                .addGap(17, 17, 17)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Merchant", jPanel3);

        btnBank_Open.setText("Open..");
        btnBank_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBank_OpenActionPerformed(evt);
            }
        });

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));

        taBank_Result.setColumns(20);
        taBank_Result.setRows(5);
        jScrollPane6.setViewportView(taBank_Result);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tfBank_FilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBank_Open)
                        .addGap(0, 601, Short.MAX_VALUE))
                    .addComponent(jPanel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfBank_FilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBank_Open))
                .addGap(17, 17, 17)
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Bank", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(jTabbedPane4, GroupLayout.PREFERRED_SIZE, 1007, Short.MAX_VALUE)
        			.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        			.addComponent(jTabbedPane4, GroupLayout.PREFERRED_SIZE, 425, GroupLayout.PREFERRED_SIZE)
        			.addGap(117))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfSoLuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSoLuongActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSoLuongActionPerformed

    private void tfNameOnCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNameOnCardActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfNameOnCardActionPerformed

    private void btnProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedActionPerformed
        // TODO add your handling code here:
        DES des = new DES();
        BigInteger privateKey = null;
        BigInteger publicKey = null;
        BigInteger nKey = null;
        ObjectInputStream ois;
        SecretKey secretKey = null;
        try {
            KeyGenerator keyGen = new KeyGenerator("DES");
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            ois = new ObjectInputStream(new FileInputStream("C://keys//customer_private.key"));
            privateKey = (BigInteger) ois.readObject();
            ois = new ObjectInputStream(new FileInputStream("C://keys//customer_public.key"));
            publicKey = (BigInteger) ois.readObject();
            ois = new ObjectInputStream(new FileInputStream("C://keys//customer_n.key"));
            nKey = (BigInteger) ois.readObject();
            ois = new ObjectInputStream(new FileInputStream("C://keys//key.key"));
            secretKey = (SecretKey) ois.readObject();
            
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        result.delete(0, result.length());
        result.append("-----------Order Information (OI)------------\n");
        result.append("Order NO: " + orderNo + "\n");
        result.append("Item NO: " + itemNo + " ----- Price: " + itemPrice + "$ \n");
        quanlity = Integer.parseInt(tfSoLuong.getText());
        result.append("Quanlity: " + quanlity + "\n");
        netAmount = itemPrice * quanlity;
        result.append("NET Amount: " + netAmount + "$ \n");
        strResultOI = orderNo + "|" + itemNo + "|" + quanlity + "|" + itemPrice + "|" + netAmount;
        result.append("Order Information (OI): " + strResultOI + "\n");
        result.append("Order Information Message Digest(OIMD): " + hash(strResultOI) + "\n");
        result.append("\n");
        result.append("----------Payment Information (PI)-----------\n");
        result.append("Card Number: " + tfCardNumber.getText() + "\n");
        strExpiryDate = "" + cbbMonth.getSelectedItem().toString() + cbbYear.getSelectedItem().toString();
        result.append("Expiry Date: " + cbbMonth.getSelectedItem().toString() + "-" + cbbYear.getSelectedItem().toString() + "\n");
        String name = tfNameOnCard.getText();
        String nameOnCard = "";
        String[] nameArray = name.split(" ");
        for (int i = 0; i < nameArray.length; i++) {
            nameOnCard += nameArray[i];
        }
        result.append("Name on Card: " + tfNameOnCard.getText() + "\n");
        strResultPI = "" + tfCardNumber.getText() + "|" + strExpiryDate + "|" + nameOnCard;
        result.append("Payment Information (PI): " + strResultPI + "\n");
        result.append("Payment Information Message Digest(PIMD): " + hash(strResultPI) + "\n");
        result.append("\n");
        result.append("==> POMD: " + hash(hash(strResultPI) + hash(strResultOI)) + "\n");
        result.append("==> \n");
        DualSignature = GenDS(strResultPI, strResultOI);
        result.append("Dual Signature: " + DualSignature + "\n");
        DES_Plaintext = strResultPI + "\n" + DualSignature + "\n" + hash(strResultOI);
        try {
            DES_CipherText = des.encrypt(DES_Plaintext, secretKey);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (java.security.InvalidKeyException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        result.append("Encrypted by DES: " + DES_CipherText + "\n");
        BigInteger bank_publicKey = null;
        BigInteger bank_nKey = null;
        try {
            ObjectInputStream inputStream = null;
            inputStream = new ObjectInputStream(new FileInputStream("C://keys//bank_public.key"));
            bank_publicKey = (BigInteger) inputStream.readObject();
            inputStream = new ObjectInputStream(new FileInputStream("C://keys//bank_n.key"));
            bank_nKey = (BigInteger) inputStream.readObject();
        } catch (Exception e) {
            e.printStackTrace();
        }

        Digital_Envelope = (new BigInteger(secretKey.getEncoded())).modPow(bank_publicKey, bank_nKey).toString();
        result.append("Digital Envelope: " + Digital_Envelope + "\n");
        result.append("===========================================================================================\n");
        Request_Message = DES_CipherText + "@" + Digital_Envelope + "@" + hash(strResultPI) + "@" + strResultOI + "@" + DualSignature + "@";
        result.append(Request_Message + "\n");
        
        try {
            File requestMessage = new File("C://keys//requestMessage.txt");
            requestMessage.createNewFile();
            ObjectOutputStream RMOS = new ObjectOutputStream(new FileOutputStream(requestMessage));
            RMOS.writeObject(Request_Message);
            RMOS.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        taResult.setText(result.toString());
        System.out.println(DES_secretKey);
        System.out.println();
        
    }//GEN-LAST:event_btnProceedActionPerformed

    private void cbbTenSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbTenSPActionPerformed
        // TODO add your handling code here:
        int selectInd = cbbTenSP.getSelectedIndex();
        switch (selectInd) {
            case 1: {
                itemPrice = 10;
                itemNo = "DT979";
                lbItemNo.setText(itemNo);
                lbGia.setText(String.valueOf(itemPrice));
            }
            break;
            case 2: {
                itemPrice = 20;
                itemNo = "LT736";
                lbItemNo.setText(itemNo);
                lbGia.setText(String.valueOf(itemPrice));
            }
            break;
            case 3: {
                itemPrice = 30;
                itemNo = "TP564";
                lbItemNo.setText(itemNo);
                lbGia.setText(String.valueOf(itemPrice));
            }
            break;
            case 4: {
                itemPrice = 40;
                itemNo = "BDS542";
                lbItemNo.setText(itemNo);
                lbGia.setText(String.valueOf(itemPrice));
            }
            break;
            case 5: {
                itemPrice = 50;
                itemNo = "CAR987";
                lbItemNo.setText(itemNo);
                lbGia.setText(String.valueOf(itemPrice));
            }
            break;
            default: {
                itemPrice = 00;
                itemNo = "";
                lbItemNo.setText(itemNo);
                lbGia.setText(String.valueOf(itemPrice));
            }
        }

    }//GEN-LAST:event_cbbTenSPActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        // TODO add your handling code here:
        result_Merchant.delete(0, result.length());
        BigInteger privateKey = null;
        BigInteger publicKey = null;
        BigInteger nKey = null;
        ObjectInputStream ois;
        try {
            ois = new ObjectInputStream(new FileInputStream("C://keys//customer_private.key"));
            privateKey = (BigInteger) ois.readObject();
            ois = new ObjectInputStream(new FileInputStream("C://keys//customer_public.key"));
            publicKey = (BigInteger) ois.readObject();
            ois = new ObjectInputStream(new FileInputStream("C://keys//customer_n.key"));
            nKey = (BigInteger) ois.readObject();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        String MessegerRequest = "";
        String filePath = getPath();
        tfFilePath.setText(filePath);
        try {
            ObjectInputStream fis = new ObjectInputStream(new FileInputStream(filePath));
            MessegerRequest = (String) fis.readObject();

        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        String[] MessegerArr = MessegerRequest.split("@");
        String MesToBank = MessegerArr[0];
        String DigitalEnvelope = MessegerArr[1];
        String Merchant_PIMD = MessegerArr[2];
        String Merchant_OI = MessegerArr[3];
        String Merchant_DS = MessegerArr[4];
        result_Merchant.append("Passed on by merchant to bank: \n");
        result_Merchant.append("Cipher Text: " + MesToBank + "\n");
        result_Merchant.append("Digital Envelope: " + DigitalEnvelope + "\n");
        result_Merchant.append("Processing by Merchant: \n");
        result_Merchant.append("PIMD: " + Merchant_PIMD + "\n");
        result_Merchant.append("OI: " + Merchant_OI + "\n");
        result_Merchant.append("Dual Signature: " + Merchant_DS + "\n");
        result_Merchant.append("Processing......\n");
        result_Merchant.append("OI to OIMD: " + hash(Merchant_OI) + "\n");
        result_Merchant.append("To POMD (1) :" + hash(Merchant_PIMD + hash(Merchant_OI)) + "\n");
        BigInteger DS_POMD = new BigInteger(Merchant_DS.getBytes());
        String strDS_POMD = new String((new BigInteger(Merchant_DS)).modPow(publicKey, nKey).toByteArray());
        result_Merchant.append("Dual Signature Decrypted (2) : " + strDS_POMD + "\n");
        result_Merchant.append("Compare (1) & (2) ... \n");
        if (strDS_POMD.equals(hash(Merchant_PIMD + hash(Merchant_OI)))) {
            result_Merchant.append("Success Authenticated !!!");
            String Mess_MerchantToBank = MesToBank + "@" + DigitalEnvelope;
            try {
                File requestMessage = new File("C://keys//Messege_Merchant_To_Bank.txt");
                requestMessage.createNewFile();
                ObjectOutputStream RMOS = new ObjectOutputStream(new FileOutputStream(requestMessage));
                RMOS.writeObject(Mess_MerchantToBank);
                RMOS.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            result_Merchant.append("Failed Authenticated !!!");
        }
        taMerchant_Result.setText(result_Merchant.toString());


    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnBank_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBank_OpenActionPerformed
        // TODO add your handling code here:
        result_Merchant.delete(0, result.length());
        String MessegerRequest = "";
        String filePath = getPath();
        tfFilePath.setText(filePath);
        BigInteger privateKey = null;
        BigInteger publicKey = null;
        BigInteger nKey = null;
        SecretKey srk = null;
        BigInteger customer_publicKey = null;
        BigInteger customer_nKey = null;
        ObjectInputStream ois;
        SecretKey secretKey = null;
        try {
            ois = new ObjectInputStream(new FileInputStream("C://keys//bank_private.key"));
            privateKey = (BigInteger) ois.readObject();
            ois = new ObjectInputStream(new FileInputStream("C://keys//bank_n.key"));
            nKey = (BigInteger) ois.readObject();
            ois = new ObjectInputStream(new FileInputStream("C://keys//key.key"));
            srk = (SecretKey) ois.readObject();
            ois = new ObjectInputStream(new FileInputStream("C://keys//customer_public.key"));
            customer_publicKey = (BigInteger) ois.readObject();
            ois = new ObjectInputStream(new FileInputStream("C://keys//customer_n.key"));
            customer_nKey = (BigInteger) ois.readObject();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            ObjectInputStream fis = new ObjectInputStream(new FileInputStream(filePath));
            MessegerRequest = (String) fis.readObject();

        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String[] MessegerArr = MessegerRequest.split("@");
        String cipher = MessegerArr[0];
        String Envelope = MessegerArr[1];
        result_Bank.append("Cipher: " +cipher+ "\n");
        result_Bank.append("Envelope: "+Envelope+"\n");
        byte[] Envelope_Encrypted = (new BigInteger(Envelope)).modPow(privateKey, nKey).toByteArray();
        result_Bank.append("Envelope Decrypted: "+Envelope_Encrypted.toString()+"\n");
        secretKey = new SecretKeySpec(Envelope_Encrypted,"DES");
        String PlainText = null;
        try {
            PlainText = des.decrypt(cipher, secretKey);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (java.security.InvalidKeyException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        result_Bank.append("Data for payment: "+PlainText+"\n");
        String[] plainTextArr = PlainText.split("\n");
        result_Bank.append("Proceed data... \n");
        result_Bank.append("PI: "+plainTextArr[0]+"\n");
        result_Bank.append("Dual Signature: "+plainTextArr[1]+"\n");
        result_Bank.append("OIMD: "+plainTextArr[2]+"\n");
        String strDS_POMD = new String((new BigInteger(plainTextArr[1])).modPow(customer_publicKey, customer_nKey).toByteArray());
        result_Bank.append("Decrypted Dual Signature (1): "+ strDS_POMD+" \n");
        String POMD = hash(hash(plainTextArr[0]) + plainTextArr[2]);
        result_Bank.append("POMD (2): "+ POMD+"\n");
        result_Bank.append("Compare (1) & (2)... \n");
        if (POMD.equals(strDS_POMD))
        {
            result_Bank.append("Successful Authentication !!! \n");
        }
        else
        {
            result_Bank.append("Failed Authentication !!!\n");
        }
        taBank_Result.setText(result_Bank.toString());
        
    }//GEN-LAST:event_btnBank_OpenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

        } catch (Exception e) {
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    private String getPath() {
        String filePath = "";
        JFileChooser fc = new JFileChooser();
        int returnFC = fc.showOpenDialog(this);
        if (returnFC == JFileChooser.APPROVE_OPTION) {
            return fc.getSelectedFile().getAbsolutePath();
        } else {
            return null;
        }
    }

    private String GenDS(String PI, String OI) {

        String DS = "";
        String PIMD = hash(PI);
        String OIMD = hash(OI);
        String POMD = hash(PIMD + OIMD);
        ObjectInputStream ois;
        BigInteger privateKey = null;
        BigInteger publicKey = null;
        BigInteger nKey = null;
        try {
            ois = new ObjectInputStream(new FileInputStream("C://keys//customer_private.key"));
            privateKey = (BigInteger) ois.readObject();
            ois = new ObjectInputStream(new FileInputStream("C://keys//customer_public.key"));
            publicKey = (BigInteger) ois.readObject();
            ois = new ObjectInputStream(new FileInputStream("C://keys//customer_n.key"));
            nKey = (BigInteger) ois.readObject();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        DS = (new BigInteger(POMD.getBytes())).modPow(privateKey, nKey).toString();
        return DS;
    }

    private String DES_Encrypt(String message) {
        DES des = new DES();
        String DES_Cipher = null;
        try {
            
                KeyGenerator keyGen = new KeyGenerator("DES");

            
            ObjectInputStream inputStream = null;

            inputStream = new ObjectInputStream(new FileInputStream("C://keys//key.key"));
            final SecretKey secretKey = (SecretKey) inputStream.readObject();
            DES_Cipher = des.encrypt(message, secretKey);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return DES_Cipher;
    }
    private String DES_Decrypt(String messege) throws IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, UnsupportedEncodingException, java.security.InvalidKeyException, IOException, ClassNotFoundException
    {
        DES des = new DES();
        ObjectInputStream ois = new ObjectInputStream(new FileInputStream("C://keys//key.key"));
        SecretKey key = (SecretKey) ois.readObject();
        ois.close();
        return new String(des.encrypt(messege, key));
    }

    private String hash(String input) {
        String result;
        sha.update(input);
        sha.finalize();
        result = sha.getResult();
        sha.clear();
        sha.reset();
        return result;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBank_Open;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnProceed;
    private javax.swing.JComboBox cbbMonth;
    private javax.swing.JComboBox cbbTenSP;
    private javax.swing.JComboBox cbbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JLabel lbDonGia;
    private javax.swing.JLabel lbGia;
    private javax.swing.JLabel lbIemPrice;
    private javax.swing.JLabel lbItemNo;
    private javax.swing.JLabel lbMaSP;
    private javax.swing.JLabel lbNetAmount;
    private javax.swing.JLabel lbOrderNo;
    private javax.swing.JLabel lbSoHoaDon;
    private javax.swing.JLabel lbTongTien;
    private javax.swing.JTextArea taBank_Result;
    private javax.swing.JTextArea taMerchant_Result;
    private javax.swing.JTextArea taResult;
    private javax.swing.JTextField tfBank_FilePath;
    private javax.swing.JTextField tfCardNumber;
    private javax.swing.JTextField tfFilePath;
    private javax.swing.JTextField tfNameOnCard;
    private javax.swing.JTextField tfSoLuong;
    // End of variables declaration//GEN-END:variables
}
